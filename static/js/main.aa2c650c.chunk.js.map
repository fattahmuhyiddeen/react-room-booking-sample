{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","data","selectedData","closeModal","_this","setState","_this2","this","axios","get","then","result","map","r","roomTypeLabel","push","catch","e","alert","JSON","stringify","_this3","content","_this$state","_arr","Object","entries","_i","length","_ref3","_ref2","slicedToArray","key","value","react_default","a","createElement","className","style","width","verticalAlign","i","borderBottom","bedTypeLabel","toString","boardCodeDescription","totalPrice","onClick","src","logo","alt","lib_default","isOpen","onRequestClose","aria","labelledby","describedby","id","name","groupKey","description","accommodateText","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa2c650c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport axios from 'axios'\nimport logo from './logo.svg';\nimport Modal from 'react-modal';\nimport './App.css';\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)'\n  }\n};\n\n\nclass App extends Component {\n  state = { data: {}, selectedData: null }\n  componentDidMount() {\n    axios.get(\"./test.json\")\n      .then((result) => {\n        const data = {}\n        result.data.map((r) => {\n          if (data[r.roomTypeLabel]) {\n            data[r.roomTypeLabel].push(r)\n          } else {\n            data[r.roomTypeLabel] = [r]\n          }\n        })\n        this.setState({ data })\n      })\n      .catch((e) => alert(JSON.stringify(e)))\n  }\n\n  closeModal = () => this.setState({ selectedData: null })\n  render() {\n    // console.log(this.state)\n    const content = []\n    const { data, selectedData } = this.state\n    for (const [key, value] of Object.entries(data)) {\n      content.push(<div className=\"parentContainer\">\n        <table style={{ width: '100%' }}>\n          <tr>\n            <td style={{ verticalAlign: 'top' }}>\n              {key}\n            </td>\n            <td>\n              <table>\n                {value.map((i) => {\n                  return <tr style={{ borderBottom: '' }}>\n                    <td >\n                      <div className=\"cellContainer\">\n                        <div>Bed Type : {i.bedTypeLabel.length > 0 ? i.bedTypeLabel.toString() : '-'}</div>\n                        <div>{i.boardCodeDescription}</div>\n                      </div>\n                    </td>\n                    <td >\n                      <div className=\"actionContainer\">\n                        <div>RM {i.totalPrice}</div>\n                        <div className=\"actionButton\" onClick={() => { this.setState({ selectedData: i }); }}>View</div>\n                      </div>\n                    </td>\n                  </tr>\n                })}\n              </table>\n            </td>\n          </tr>\n        </table>\n      </div>)\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          {content}\n        </header>\n        <Modal\n          isOpen={selectedData}\n          onRequestClose={this.closeModal}\n          aria={{\n            labelledby: \"heading\",\n            describedby: \"full_description\"\n          }}>\n          {selectedData && <div>\n            <h1 id=\"heading\">{selectedData.name} ({selectedData.groupKey})</h1>\n            <div id=\"full_description\">\n              <p>{selectedData.description}</p>\n              <p>Accommodation : {selectedData.accommodateText}</p>\n\n            </div>\n          </div>}\n          <div onClick={this.closeModal} className=\"closeButton\">close</div>\n        </Modal>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}